This is a course note for C++ Algorithm, Data structure udemy course

TYPE OF DATA STRUCTURES

Physical; how the memory should be organized
1. Array; size is static, can be created in stack, heap
2. Linked list; linked to next node, has variable length, created in heap

Logical; are implemented using physical data structure

linear
1. stack
2. queues
non-linear
3. tress 
4. graph
tabular
5. hash table
 
 ABSTRACT DATATYPE (ADT)
 1. representation of data
 2. operation on data

RECURSION //function calling itself
void fun1(int n)
{
    if(n>0)
    {
        fun1(n-1;)
        print("%d",n); //the output is 1,2,3. 
                       //Every function call rturns to its calling point
        
    }
}
void main()
{
    int x=3;
    fun1(x); 
}

TIME COMPLEXITY IN RECURSIVE FUNCTION
print n units
= O(n)

void fun1(int n) //T(n)
{
    if(n>0) //1
    {
        print("%d",n); //1
        fun1(n-1;) //T(n-1)
    }
}
so T(n) = 1(n=0), T(n-1)+2(n>0)
= T(n-k)+k

assume n-k=0, n=k
T(n) = 1 + n


TYPES OF RECURSION
1. Tail Recursion
void fun(int n)
{
    if(n>0)
    {
        -----
        -----
        fun(n-1); //finish things and call itself
    }
}
void fun(int n)
{
    while(n>0) //loop tail recursion
    {
        cout(n);
        n--
    }
}
Comparison: Running time is same
Space : O(n)
        O(1) //loop takes less space, more efficient
2. Head Recursion
void fun(int n)
{
    if(n>0)
    {
        fun(n-1); //call itself and execute following code
        -----
        -----
    }
}

void fun(int n) //loop version
{
    int i = 1;
    while(i<=n)
    {
        cout << i;
        i++;
        -----
        -----
    }
}
3. Tree Recursion //calling itself more than 1 time
fun(n) //calltime 2^(n+1) -1 = O(2^n), space = O(n)
{
    if(n>0)
    {
        ---
        fun(n-1);
        ---
        fun(n-1);
        ---
    }
}

Linear Recursion
fun(n)
{
    if(n>0)
    {
        ---
        fun(n-1); //calling only 1 time
        ---
    }
} 

4. Indirect Recursion
void funA(int n)
{
    if(n>0)
    {
        cout << n;
        funB(n-1);
    }
}
void funB(int n)
{
    if(n>1)
    {
        cout <<n;
        funA(n/2);
    }
}
5. Nested Recursion
int fun(int n)
{
    if(n>100)
    {
        return n-10;
    }
    else
    return fun(fun(n+11));
}

MEMOIZATION
= storing result of the function so it can be utilized again


ARRAY
scalar variable // int x =10;
vector variable // int A[5];

1. int A[5]; //garbage value
2. int A[5]={1,2,3,4,5};
3. int A[5][1,2];
4. int A[5]={0};
5. int A[]={1,2,3,4,5};

STATIC vs DYNAMIC ARRAY
to access to heap, need pointer
void main()
{
    int A[5]; //static
    A[0] = 5;
    int *p;
    p = new int [5] //array in heap, can be resized
    p[0] = 5;
    delete []p;
}

INCREASE ARRAY SIZE
int *p = new int [5]
int *q= new int [10]
for(int i=0; i<5; i++)
    q[i] = p[i];
delete []p;
p=q;
q = NULL

2D ARRAY
1. int A[3][4] //in stack

2. int *A[3] //in stack
A[0] = new int[4]; //in heap
A[1] = new int[4];
A[2] = new int[4];
A[1][2] =15;

3. int **A; //double pointer in tack
A = new int*[3] //in heap
A[0] = new int[4]; //in heap
A[1] = new int[4];
A[2] = new int[4];
A[1][2] =15;

ARRAY MAPPING //example A[3][4]
1. Row-major mapping 
Add(A[1][2]) = 200basic address + [4second row + 2third column]*2byte
2. Column-major mapping
Add(A[1][2]) = 200basic address + [2thir column*3rows + 1row]*2byte

4D ARRAY MAPPING//example A[d1][d2][d3][d4]
Row-major mapping 
addr(A[i1][i2][i3][i4]) = L0 + (i1*d2*d3*d4 + i2*d3*d4 + i3*d4 + i4) * w
Column-major mapping
addr(A[i1][i2][i3][i4]) = L0 + (i4*d1*d2*d3 + i3*d1*d2 + i2*d1 + i1) * w

nD ARRAY MAPPING
L0 + (n sigma p=1) ip * 

ROW
int A[l][m][n];
addr(A[i][j][k]) = L0 +[i*m*n+j*n+k]*w

COLUMN 
int A[l][m][n];
addr(A[i][j][k]) = L0 +[k*l*m+j*l+i]*w

ARRAY ABSTRACT DATA TYPE    

DATA
1. Array space
2. Size 
3. Length(No of elements)

1. int A[10]
2. int *A;
A= new int[size]
